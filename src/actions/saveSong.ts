"use server";

import { addDoc, collection, doc, getDoc, updateDoc } from "firebase/firestore";
import { cookies } from "next/headers";

import { Scale } from "@/app/d/useDashboardState";
import { SESSION_COOKIE_NAME } from "@/features/auth/consts";
import { decodeSessionToken } from "@/features/auth/decodeSessionToken";
import { UserData } from "@/features/auth/types";
import { db } from "@/features/firebase/firebase";

interface UserDocData {
	songs: string[];
}

export const saveSong = async ({
	songName,
	songId,
	credits,
	lyrics,
	translation,
	keyNote,
	scale,
}: {
	songName: string | undefined;
	songId: string | undefined;
	credits: string | undefined;
	lyrics: string | undefined;
	translation: string | undefined;
	keyNote: string | undefined;
	scale: Scale;
}) => {
	// fist check that the user is signed in
	// if not, return an error
	const sessionCookie = cookies().get(SESSION_COOKIE_NAME);

	if (!sessionCookie) {
		return {
			result: "ERROR",
			message: "User is not signed in",
		};
	}

	const sessionToken = sessionCookie.value;

	const userData = (await decodeSessionToken(sessionToken))
		?.payload as unknown as UserData;

	const email = userData.email;

	if (songId) {
		// check the users firestore collection in the songs array field to see if this user owns the song
		const userDocRef = await getDoc(doc(db, "users", email));
		const userDocData = userDocRef.data() as UserDocData;
		if (userDocData === undefined) {
			return {
				result: "ERROR",
				message: "User does not exist",
			};
		}
		const userSongs = userDocData.songs;
		if (!userSongs.includes(songId)) {
			return {
				result: "ERROR",
				message: "User does not own this song",
			};
		}

		// insert of update the song in the songs collection
		await updateDoc(doc(db, "songs", songId), {
			songName,
			credits,
			lyrics,
			translation,
			keyNote,
			scale,
		});
	} else {
		// get current user songs
		const userDoc = await getDoc(doc(db, "users", email));
		const userDocData = userDoc.data() as UserDocData;
		if (userDocData === undefined) {
			console.log({ email });
			return {
				result: "ERROR",
				message: "User does not exist",
			};
		}

		const userSongs = userDocData.songs ?? [];

		// add the song to the songs collection with newSongId generated by firestore
		const songRef = await addDoc(collection(db, "songs"), {
			songName,
			credits,
			lyrics,
			translation,
			keyNote,
			scale,
		});

		const newSongId = songRef.id;

		// add the song to the users collection
		const userDocRef = doc(db, "users", email);
		await updateDoc(userDocRef, {
			songs: [...userSongs, newSongId],
		});

		return {
			result: "SUCCESS",
			songId: newSongId,
		};
	}

	return {
		result: "SUCCESS",
		songId,
	};
};
